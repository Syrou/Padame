buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
        maven { url "https://dl.bintray.com/soywiz/soywiz" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_version"
    }

}

plugins {
    id 'kotlin-multiplatform' version '1.3.20'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
}


kotlin {
    targets {
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        fromPreset(presets.mingwX64, 'mingw')
        fromPreset(presets.macosX64, 'macOS')

        configure([mingw, macOS]) {
            // Comment to generate Kotlin/Native library (KLIB) instead of executable file:
            compilations.main.outputKinds('EXECUTABLE')
            // Change to specify fully qualified name of your application's entry point:
            compilations.main.entryPoint = 'com.poehelper.main'
        }
    }
    sourceSets {
        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
        commonMain {
            dependencies{
                //api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines"
                implementation "com.soywiz:korio-metadata:$korVersion"
            }
        }

        mingwMain {
            dependencies {
                //implementation "org.jetbrains.kotlin:kotlin-stdlib"
                //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native_debug_mingw_x64:$coroutines"
                implementation "com.soywiz:korio-mingwx64:$korVersion"
                //implementation "org.jetbrains.kotlinx:atomicfu-windows64:$atomicfu"
            }
        }
        mingwTest {
        }
        
        macOSMain {
            dependencies {
                //implementation "org.jetbrains.kotlin:kotlin-stdlib"
                //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native_debug_mingw_x64:$coroutines"
                implementation "com.soywiz:korio-macosx64:$korVersion"
                //implementation "org.jetbrains.kotlinx:atomicfu-windows64:$atomicfu"
            }
        }
    }
}

task runProgram {
    def buildType = 'release' // Change to 'debug' to run application with debug symbols.
    dependsOn "link${buildType.capitalize()}ExecutableMingw"
    doLast {
        def programFile = kotlin.targets.mingw.compilations.main.getBinary('EXECUTABLE', buildType)
        exec {
            executable programFile
            args ''
        }
    }
}